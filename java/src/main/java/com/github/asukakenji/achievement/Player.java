package com.github.asukakenji.achievement;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

/**
 * {@code Player} is a class used to store player properties as designed by the game designers.
 * It does not contain any logic specially designed for the achievement system.
 * It does not contain any references to objects that are part of the achievement system.
 * All it has to follow is a JavaBeans like pattern to allow the fields to be got and set.
 *
 * @author asukakenji
 *
 */
public class Player implements java.io.Serializable {

	/** Generated by the serialver utility */
	// TODO: private static final long serialVersionUID = 7193509014107712563L;

	private String username;
	private String password;
	private int lv;
	private long xp;
	private long lp;
	private long chips;
	private final Set<String> achievements;
	private final List<String> mbox;  // Should be List<Mail>

	public Player(final String username, final String password) {
		this(username, password, 1, 0, 100, 3000, new HashSet<String>(), new LinkedList<String>());
	}

	public Player(
			final String username,
			final String password,
			final int lv,
			final long xp,
			final long lp,
			final long chips,
			final Set<String> achievements,
			final List<String> mbox) {
		checkUsername(username);
		checkPassword(password);
		checkLv(lv);
		checkXp(xp);
		checkLp(lp);
		checkChips(chips);
		checkAchievements(achievements);
		checkMbox(mbox);
		this.username = username;
		this.password = password;
		this.lv = lv;
		this.xp = xp;
		this.lp = lp;
		this.chips = chips;
		this.achievements = achievements;
		this.mbox = mbox;
	}

	@Override
	public final int hashCode() {
		return ((((((//(
			(1 * 31) + this.username.hashCode()
			//) * 31 + this.password.hashCode()
			) * 31 + this.lv
			) * 31 + ((int)(this.xp ^ (this.xp >>> 32)))
			) * 31 + ((int)(this.lp ^ (this.lp >>> 32)))
			) * 31 + ((int)(this.chips ^ (this.chips >>> 32)))
			) * 31 + this.achievements.hashCode()
			) * 31 + this.mbox.hashCode();
	}

	// See: http://stackoverflow.com/q/13162188/142239
	protected final boolean equalsPlayer(final Player player) {
		return this.username.equals(player.username)
			// && this.password.equals(player.password)
			&& this.lv == player.lv
			&& this.xp == player.xp
			&& this.lp == player.lp
			&& this.chips == player.chips
			&& this.achievements.equals(player.achievements)
			&& this.mbox.equals(player.mbox);
	}

	@Override
	public final boolean equals(final Object obj) {
		if (obj == null) return false;
		if (obj == this) return true;
		// See: http://stackoverflow.com/q/12239344/142239
		if (obj.getClass() != Player.class) return false;
		return this.equalsPlayer((Player) obj);
	}

	@Override
	public final String toString() {
		return new StringBuilder("[Player: \"username\": \"")
			.append(this.username)
			.append("\", \"lv\": ")
			.append(this.lv)
			.append(", \"xp\": ")
			.append(this.xp)
			.append(", \"lp\": ")
			.append(this.lp)
			.append(", \"chips\": ")
			.append(this.chips)
			.append(", \"achievements\": ")
			.append(this.achievements /* TODO: stringify(this.achievements) */)
			.append(", \"mbox\": ")
			.append(this.mbox /* TODO: stringify(this.mbox) */)
			.append("]")
			.toString();
	}

	private final void checkUsername(final String username) {
		if (username == null) throw new NullPointerException();
		if ("".equals(username)) throw new IllegalArgumentException();
	}

	private final void checkPassword(final String password) {
		if (password == null) throw new NullPointerException();
		if ("".equals(password)) throw new IllegalArgumentException();
	}

	private final void checkLv(final int lv) {
		if (lv < 1) throw new IllegalArgumentException();
	}

	private final void checkXp(final long xp) {
		if (xp < 0) throw new IllegalArgumentException();
	}

	private final void checkLp(final long lp) {
		if (lp < 0) throw new IllegalArgumentException();
	}

	private final void checkChips(final long chips) {
		if (chips < 0) throw new IllegalArgumentException();
	}

	private final void checkAchievements(final Set<String> achievements) {
		if (achievements == null) throw new NullPointerException();
	}

	private final void checkMbox(final List<String> mbox) {
		if (mbox == null) throw new NullPointerException();
	}

	/**
	 * Returns the username of this player.
	 *
	 * @return the username of this player,
	 * which is never {@code null} or empty String
	 */
	public final String getUsername() {
		return this.username;
	}

	/**
	 * Returns whether the password of this player matches the supplied password.
	 *
	 * @param password the supplied password
	 * @return true if the passwords are equal;
	 * false otherwise.
	 */
	public final boolean isPasswordMatch(final String password) {
		return this.password.equals(password);
	}

	/**
	 * Returns the level of this player.
	 *
	 * @return the level of this player,
	 * which is an integer greater than or equal to 1
	 */
	public final int getLv() {
		return this.lv;
	}

	/**
	 * Sets the level of this player.
	 *
	 * @param newLv the new level of this player
	 * @throws IllegalArgumentException if the {@code newLv} argument is less than 1
	 */
	public final void setLv(final int newLv) {
		checkLv(newLv);
		this.lv = newLv;
	}

	/**
	 * Returns the number of experience points this player is having.
	 *
	 * @return the number of experience points this player is having,
	 * which is a non-negative integer
	 */
	public final long getXp() {
		return this.xp;
	}

	/**
	 * Sets the number of experience points this player is having.
	 *
	 * @param newXp the number of experience points this player is going to have
	 * @throws IllegalArgumentException if the {@code newXp} argument is negative
	 */
	public final void setXp(final long newXp) {
		checkXp(newXp);
		this.xp = newXp;
	}

	/**
	 * Returns the number of loyalty points this player is having.
	 *
	 * @return the number of loyalty points this player is having,
	 * which is a non-negative integer
	 */
	public final long getLp() {
		return this.lp;
	}

	/**
	 * Sets the number of loyalty points this player is having.
	 *
	 * @param newLp the number of loyalty points this player is going to have
	 * @throws IllegalArgumentException if the {@code newLp} argument is negative
	 */
	public final void setLp(final long newLp) {
		checkLp(lp);
		this.lp = newLp;
	}

	/**
	 * Returns the number of chips this player is having.
	 *
	 * @return the number of chips this player is having
	 */
	public final long getChips() {
		return this.chips;
	}

	/**
	 * Sets the number of chips this player is having.
	 *
	 * @param newChips the number of chips this player is going to have
	 * @throws IllegalArgumentException if the {@code newChips} argument is negative
	 */
	public final void setChips(final long newChips) {
		checkChips(newChips);
		this.chips = newChips;
	}

	// TODO
	public final boolean hasAchievement(final String achievement) {
		return this.achievements.contains(achievement);
	}

	// TODO
	public final Set<String> getAchievements() {
		return new HashSet<String>(this.achievements);
	}

	// TODO
	public final List<String> getMbox() {
		return new LinkedList<String>(this.mbox);
	}

	// TODO
	public final void receiveAll() {
		this.mbox.clear();
	}

}
